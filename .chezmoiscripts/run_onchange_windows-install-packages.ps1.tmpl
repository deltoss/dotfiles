{{ if eq .chezmoi.os "windows" -}}

# Self-elevate the script if required
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-NoExit -NoProfile -NoLogo -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath pwsh.exe -Verb Runas -ArgumentList $CommandLine
    Exit
  }
}

Write-Host "Configuring necessary environment variables..."
$env:CHEZMOI_SOURCEDIR = "{{.chezmoi.sourceDir}}"

# Installs prerequisites for the Install Scripts
# See https://github.com/microsoft/winget-cli
if (-not (Get-Module -ListAvailable -Name Microsoft.WinGet.Client)) {
    Write-Host "Installing Microsoft.WinGet.Client module..."
    Install-Module -Name Microsoft.WinGet.Client -Force -AllowClobber -Scope CurrentUser -Repository PSGallery -Confirm:$false
}
Import-Module -Name Microsoft.WinGet.Client

# winget list gets us a string back, not a powershell object to manipulate.
# Thus, use Microsoft.WinGet.Client to get the list of installed packages instead.
$packagesInstalled = Get-WinGetPackage -Source winget | Select-Object -ExpandProperty Id

{{- $packagesToInstall := .packages.windows.core -}}
{{- if and (eq .computerPurpose "personal") (hasKey .packages.windows "personal") -}}
  {{- $packagesToInstall = concat $packagesToInstall .packages.windows.personal -}}
{{- else if and (eq .computerPurpose "work") (hasKey .packages.windows "work") -}}
  {{- $packagesToInstall = concat $packagesToInstall .packages.windows.work -}}
{{- end -}}

{{- range $packagesToInstall }}
  $displayName = "{{ if hasKey . "id" }}{{ .id }}{{ else if hasKey . "name" }}{{ .name }}{{ else }}Unknown{{ end }}"
  Write-Host "Checking $displayName..."
  {{- if hasKey . "precommand" }}
    {{ .precommand }}
  {{ end }}
  {{- if hasKey . "id" }}
    if ($packagesInstalled -contains "{{ .id }}") {
        Write-Host "$displayName is already installed, skipping..."
    } else {
        Write-Host "Installing $displayName..."
        winget install --id {{ .id | quote }} -e --no-upgrade
    }
  {{ end }}
  {{- if hasKey . "command" }}
    {{ .command }}
  {{ end }}
  {{- if hasKey . "postcommand" }}
    {{ .postcommand }}
  {{ end }}
{{- end -}}

Write-Host "Review the output, then type 'exit' + enter..."

{{- end -}}
