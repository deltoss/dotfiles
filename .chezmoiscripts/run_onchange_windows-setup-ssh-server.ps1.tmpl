{{ if eq .chezmoi.os "windows" -}}

{{- if eq .computerPurpose "personal" -}}

# Self-elevate the script if required
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-NoExit -NoProfile -NoLogo -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath pwsh.exe -Verb Runas -ArgumentList $CommandLine
    Exit
  }
}

# Windows SSH Server Setup Script
function Install-SSHServerIfNeeded {
    $sshServer = Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Server*'

    if ($sshServer.State -eq "Installed") {
        Write-Host "OpenSSH Server is already installed" -ForegroundColor Yellow
        return
    }

    Write-Host "Installing OpenSSH Server..." -ForegroundColor Cyan
    Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0

    if ($LASTEXITCODE -ne 0) {
        Write-Host "Failed to install OpenSSH Server" -ForegroundColor Red
        exit 1
    }

    Write-Host "OpenSSH Server installed successfully" -ForegroundColor Green
}

function Configure-SSHServerServices {
    Write-Host "Configuring SSH Server services..." -ForegroundColor Cyan
    Set-Service -Name sshd -StartupType 'Automatic'
    Start-Service sshd
}

function Configure-SSHServerFirewall {
    Write-Host "Configuring Windows Firewall..." -ForegroundColor Cyan
    $firewallRule = Get-NetFirewallRule -DisplayName "SSH Server" -ErrorAction SilentlyContinue

    if ($firewallRule) {
        Write-Host "SSH firewall rule already exists" -ForegroundColor Yellow
    } else {
        New-NetFirewallRule -DisplayName 'SSH Server' -Direction Inbound -Protocol TCP -LocalPort 22 -Action Allow
        Write-Host "SSH firewall rule created" -ForegroundColor Green
    }
}

function Configure-SSHServerSettings {
    Write-Host "Configuring SSH settings..." -ForegroundColor Cyan

    $sshdConfigPath = "$env:ProgramData\ssh\sshd_config"

    # Comment these out, otherwise it'd cause non-standard behavior, such as:
    # - Looking for keys in a different directory instead of the standard ~/.ssh/authorized_keys for admin user accounts
    $linesToComment = @(
        'Match Group administrators',
        'AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys'
    )

    foreach ($line in $linesToComment) {
        $content = Get-Content $sshdConfigPath
        $content = $content -replace "^(\s*)($([regex]::Escape($line)))", '# $1$2'
        $content | Set-Content $sshdConfigPath
    }

    $linesToAdd = @(
        'PubkeyAuthentication yes',
        'PasswordAuthentication no',
        'AuthorizedKeysFile .ssh/authorized_keys'
    )

    foreach ($change in $linesToAdd) {
        $key = $change.Split(' ')[0]
        # Remove any existing commented/uncommented versions
        (Get-Content $sshdConfigPath) | Where-Object { $_ -notmatch "^#?$key" } | Set-Content $sshdConfigPath
        # Append the new setting
        Add-Content $sshdConfigPath $change
    }

    $pwshPath = (Get-Command pwsh).Source
    $NewItemPropertyParams = @{
        Path         = "HKLM:\SOFTWARE\OpenSSH"
        Name         = "DefaultShell"
        Value        = $pwshPath
        PropertyType = "String"
        Force        = $true
    }
    New-ItemProperty @NewItemPropertyParams

    Write-Host "Restarting SSH service..." -ForegroundColor Cyan
    net stop sshd
    net start sshd
}

function Show-SSHServerSetupResults {
    Write-Host "`nSSH Server Setup Complete!" -ForegroundColor Green
    Write-Host "================================" -ForegroundColor Green

    $ipAddresses = Get-NetIPAddress -AddressFamily IPv4 | 
                   Where-Object { $_.IPAddress -ne '127.0.0.1' -and ($_.PrefixOrigin -eq 'Dhcp' -or $_.PrefixOrigin -eq 'Manual') }

    Write-Host "Your SSH server is now running on:" -ForegroundColor Cyan
    foreach ($ip in $ipAddresses) {
        Write-Host "  ssh $env:USERNAME@$($ip.IPAddress)" -ForegroundColor White
    }

    Write-Host "`nTo connect from another machine, use:" -ForegroundColor Cyan
    Write-Host "  ssh $env:USERNAME@<YOUR_IP_ADDRESS>" -ForegroundColor White

    Write-Host "`nTo set up key-based authentication:" -ForegroundColor Cyan
    Write-Host "1. Generate SSH keys on client: ssh-keygen -t ed25519" -ForegroundColor White
    Write-Host "2. Copy public key to: $env:USERPROFILE\.ssh\authorized_keys" -ForegroundColor White

    Write-Host "`nSSH service status:" -ForegroundColor Cyan
    Get-Service sshd | Format-Table Name, Status, StartType -AutoSize
}

function Setup-WindowsSSHServer {
    Write-Host "Setting up Windows SSH Server..." -ForegroundColor Green

    Install-SSHServerIfNeeded
    Configure-SSHServerServices
    Configure-SSHServerFirewall
    Configure-SSHServerSettings
    Show-SSHServerSetupResults
}

Setup-WindowsSSHServer

Write-Host "Review the output, then type 'exit' + enter..."

{{- end -}}

{{- end -}}
